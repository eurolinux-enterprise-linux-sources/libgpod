<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" 
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="libgpod-Smart-Playlists">
<refmeta>
<refentrytitle role="top_of_page">Smart Playlists</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBGPOD Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>Smart Playlists</refname>
<refpurpose>Data structure to represent an iPod smart playlist</refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>



                    <link linkend="Itdb-SPLPref">Itdb_SPLPref</link>;
                    <link linkend="Itdb-SPLRule">Itdb_SPLRule</link>;
                    <link linkend="Itdb-SPLRules">Itdb_SPLRules</link>;
enum                <link linkend="ItdbLimitSort">ItdbLimitSort</link>;
enum                <link linkend="ItdbLimitType">ItdbLimitType</link>;
enum                <link linkend="ItdbSPLAction">ItdbSPLAction</link>;
enum                <link linkend="ItdbSPLActionLast">ItdbSPLActionLast</link>;
enum                <link linkend="ItdbSPLActionType">ItdbSPLActionType</link>;
enum                <link linkend="ItdbSPLField">ItdbSPLField</link>;
enum                <link linkend="ItdbSPLFieldType">ItdbSPLFieldType</link>;
enum                <link linkend="ItdbSPLMatch">ItdbSPLMatch</link>;
#define             <link linkend="ITDB-SPL-DATE-IDENTIFIER:CAPS">ITDB_SPL_DATE_IDENTIFIER</link>
#define             <link linkend="ITDB-SPL-STRING-MAXLEN:CAPS">ITDB_SPL_STRING_MAXLEN</link>
<link linkend="ItdbSPLFieldType">ItdbSPLFieldType</link>    <link linkend="itdb-splr-get-field-type">itdb_splr_get_field_type</link>            (const <link linkend="Itdb-SPLRule">Itdb_SPLRule</link> *splr);
<link linkend="ItdbSPLActionType">ItdbSPLActionType</link>   <link linkend="itdb-splr-get-action-type">itdb_splr_get_action_type</link>           (const <link linkend="Itdb-SPLRule">Itdb_SPLRule</link> *splr);
<link linkend="void">void</link>                <link linkend="itdb-splr-validate">itdb_splr_validate</link>                  (<link linkend="Itdb-SPLRule">Itdb_SPLRule</link> *splr);
<link linkend="void">void</link>                <link linkend="itdb-splr-remove">itdb_splr_remove</link>                    (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                                         <link linkend="Itdb-SPLRule">Itdb_SPLRule</link> *splr);
<link linkend="Itdb-SPLRule">Itdb_SPLRule</link>*       <link linkend="itdb-splr-new">itdb_splr_new</link>                       (void);
<link linkend="void">void</link>                <link linkend="itdb-splr-add">itdb_splr_add</link>                       (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                                         <link linkend="Itdb-SPLRule">Itdb_SPLRule</link> *splr,
                                                         <link linkend="gint">gint</link> pos);
<link linkend="Itdb-SPLRule">Itdb_SPLRule</link>*       <link linkend="itdb-splr-add-new">itdb_splr_add_new</link>                   (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                                         <link linkend="gint">gint</link> pos);
<link linkend="void">void</link>                <link linkend="itdb-spl-copy-rules">itdb_spl_copy_rules</link>                 (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *dest,
                                                         <link linkend="Itdb-Playlist">Itdb_Playlist</link> *src);
<link linkend="gboolean">gboolean</link>            <link linkend="itdb-splr-eval">itdb_splr_eval</link>                      (<link linkend="Itdb-SPLRule">Itdb_SPLRule</link> *splr,
                                                         <link linkend="Itdb-Track">Itdb_Track</link> *track);
<link linkend="void">void</link>                <link linkend="itdb-spl-update">itdb_spl_update</link>                     (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *spl);
<link linkend="void">void</link>                <link linkend="itdb-spl-update-all">itdb_spl_update_all</link>                 (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);
<link linkend="void">void</link>                <link linkend="itdb-spl-update-live">itdb_spl_update_live</link>                (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);
</synopsis>
</refsynopsisdiv>









<refsect1 role="desc">
<title role="desc.title">Description</title>
<para>
These functions and structures are for dealing with smart playlists.
</para>
</refsect1>

<refsect1 role="details">
<title role="details.title">Details</title>
<refsect2>
<title><anchor id="Itdb-SPLPref" role="struct" condition="since:0.5.0"/>Itdb_SPLPref</title>
<indexterm role="0.5.0"><primary>Itdb_SPLPref</primary></indexterm><programlisting>typedef struct {
    guint8  liveupdate;
    guint8  checkrules;
    guint8  checklimits;
    guint32 limittype;
    guint32 limitsort;
    guint32 limitvalue;
    guint8  matchcheckedonly;
    gint32 reserved_int1;
    gint32 reserved_int2;
    gpointer reserved1;
    gpointer reserved2;
} Itdb_SPLPref;
</programlisting>
<para>
Smart Playlist preferences are for various flags that are not strictly smart
playlist "rules."</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="guint8">guint8</link>&nbsp;<structfield>liveupdate</structfield>;</term>
<listitem><simpara>         Live Updating
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint8">guint8</link>&nbsp;<structfield>checkrules</structfield>;</term>
<listitem><simpara>         Match this number of rules.  If set to 0, ignore rules.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint8">guint8</link>&nbsp;<structfield>checklimits</structfield>;</term>
<listitem><simpara>        Limit to this number of <parameter>limittype</parameter>.  If 0, no limits.
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint32">guint32</link>&nbsp;<structfield>limittype</structfield>;</term>
<listitem><simpara>          an <link linkend="ItdbLimitType"><type>ItdbLimitType</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint32">guint32</link>&nbsp;<structfield>limitsort</structfield>;</term>
<listitem><simpara>          an <link linkend="ItdbLimitSort"><type>ItdbLimitSort</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint32">guint32</link>&nbsp;<structfield>limitvalue</structfield>;</term>
<listitem><simpara>         The value typed next to "Limit type"
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint8">guint8</link>&nbsp;<structfield>matchcheckedonly</structfield>;</term>
<listitem><simpara>   Match only checked songs
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint32">gint32</link>&nbsp;<structfield>reserved_int1</structfield>;</term>
<listitem><simpara>      Reserved for future use
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint32">gint32</link>&nbsp;<structfield>reserved_int2</structfield>;</term>
<listitem><simpara>      Reserved for future use
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gpointer">gpointer</link>&nbsp;<structfield>reserved1</structfield>;</term>
<listitem><simpara>          Reserved for future use
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gpointer">gpointer</link>&nbsp;<structfield>reserved2</structfield>;</term>
<listitem><simpara>          Reserved for future use
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.5.0
</para></refsect2>
<refsect2>
<title><anchor id="Itdb-SPLRule" role="struct" condition="since:0.5.0"/>Itdb_SPLRule</title>
<indexterm role="0.5.0"><primary>Itdb_SPLRule</primary></indexterm><programlisting>typedef struct {
    guint32 field;
    guint32 action;
    gchar *string;
    guint64 fromvalue;
    gint64 fromdate;
    guint64 fromunits;
    guint64 tovalue;
    gint64 todate;
    guint64 tounits;
    guint32 unk052;
    guint32 unk056;
    guint32 unk060;
    guint32 unk064;
    guint32 unk068;
    /* reserved for future use */
    gint32 reserved_int1;
    gint32 reserved_int2;
    gpointer reserved1;
    gpointer reserved2;
} Itdb_SPLRule;
</programlisting>
<para>
Smart Playlist Rule
</para>
<para>
The from and to fields require some explanation.  If <parameter>field</parameter> is a date type,
then <parameter>value</parameter> would be set to 0x2dae2dae2dae2dae, <parameter>date</parameter> would be a number,
(e.g. 2 or -2), and <parameter>units</parameter> would be a time unit in seconds (e.g. one week
would be 604800).  If <parameter>field</parameter> is an integer comparison, like rating = 60 (i.e.
3 stars), then <parameter>value</parameter> would be the value we care about (e.g. 60), <parameter>date</parameter> would
be 0, and <parameter>units</parameter> would be 1.  Binary AND types are similar, <parameter>value</parameter> is the
important part, with <parameter>date</parameter> = 0 and <parameter>units</parameter> = 1.  Clear as mud, right?
</para>
<para>
For more details see <ulink
url="http://ipodlinux.org/ITunesDB.html&num;Smart_Playlist_Rule_Values">ipodlinux.org</ulink>.</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="guint32">guint32</link>&nbsp;<structfield>field</structfield>;</term>
<listitem><simpara>          an <link linkend="ItdbSPLFieldType"><type>ItdbSPLFieldType</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint32">guint32</link>&nbsp;<structfield>action</structfield>;</term>
<listitem><simpara>         an <link linkend="ItdbSPLActionType"><type>ItdbSPLActionType</type></link>
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gchar">gchar</link>&nbsp;*<structfield>string</structfield>;</term>
<listitem><simpara>         data in UTF8
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint64">guint64</link>&nbsp;<structfield>fromvalue</structfield>;</term>
<listitem><simpara>      from value
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint64">gint64</link>&nbsp;<structfield>fromdate</structfield>;</term>
<listitem><simpara>       from date
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint64">guint64</link>&nbsp;<structfield>fromunits</structfield>;</term>
<listitem><simpara>      from units
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint64">guint64</link>&nbsp;<structfield>tovalue</structfield>;</term>
<listitem><simpara>        to value
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint64">gint64</link>&nbsp;<structfield>todate</structfield>;</term>
<listitem><simpara>         to date
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint64">guint64</link>&nbsp;<structfield>tounits</structfield>;</term>
<listitem><simpara>        to units
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint32">guint32</link>&nbsp;<structfield>unk052</structfield>;</term>
<listitem><simpara>         Unknown
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint32">guint32</link>&nbsp;<structfield>unk056</structfield>;</term>
<listitem><simpara>         Unknown
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint32">guint32</link>&nbsp;<structfield>unk060</structfield>;</term>
<listitem><simpara>         Unknown
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint32">guint32</link>&nbsp;<structfield>unk064</structfield>;</term>
<listitem><simpara>         Unknown
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint32">guint32</link>&nbsp;<structfield>unk068</structfield>;</term>
<listitem><simpara>         Unknown
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint32">gint32</link>&nbsp;<structfield>reserved_int1</structfield>;</term>
<listitem><simpara>  Reserved for future use
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint32">gint32</link>&nbsp;<structfield>reserved_int2</structfield>;</term>
<listitem><simpara>  Reserved for future use
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gpointer">gpointer</link>&nbsp;<structfield>reserved1</structfield>;</term>
<listitem><simpara>      Reserved for future use
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gpointer">gpointer</link>&nbsp;<structfield>reserved2</structfield>;</term>
<listitem><simpara>      Reserved for future use
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.5.0
</para></refsect2>
<refsect2>
<title><anchor id="Itdb-SPLRules" role="struct" condition="since:0.5.0"/>Itdb_SPLRules</title>
<indexterm role="0.5.0"><primary>Itdb_SPLRules</primary></indexterm><programlisting>typedef struct {
    guint32 unk004;
    guint32 match_operator;
    GList *rules;
    /* reserved for future use */
    gint32 reserved_int1;
    gint32 reserved_int2;
    gpointer reserved1;
    gpointer reserved2;
} Itdb_SPLRules;
</programlisting>
<para>
Smart Playlist Rules</para>
<para>

</para><variablelist role="struct">
<varlistentry>
<term><link linkend="guint32">guint32</link>&nbsp;<structfield>unk004</structfield>;</term>
<listitem><simpara>         Unknown
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="guint32">guint32</link>&nbsp;<structfield>match_operator</structfield>;</term>
<listitem><simpara> Whether all rules must match (<link linkend="ITDB-SPLMATCH-AND:CAPS"><type>ITDB_SPLMATCH_AND</type></link>) or any
                 rules may match (<link linkend="ITDB-SPLMATCH-OR:CAPS"><type>ITDB_SPLMATCH_OR</type></link>)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GList">GList</link>&nbsp;*<structfield>rules</structfield>;</term>
<listitem><simpara>          list of <link linkend="Itdb-SPLRule"><type>Itdb_SPLRule</type></link>'s
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint32">gint32</link>&nbsp;<structfield>reserved_int1</structfield>;</term>
<listitem><simpara>  Reserved for future use
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gint32">gint32</link>&nbsp;<structfield>reserved_int2</structfield>;</term>
<listitem><simpara>  Reserved for future use
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gpointer">gpointer</link>&nbsp;<structfield>reserved1</structfield>;</term>
<listitem><simpara>      Reserved for future use
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="gpointer">gpointer</link>&nbsp;<structfield>reserved2</structfield>;</term>
<listitem><simpara>      Reserved for future use
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.5.0
</para></refsect2>
<refsect2>
<title><anchor id="ItdbLimitSort" role="enum" condition="since:0.5.0"/>enum ItdbLimitSort</title>
<indexterm role="0.5.0"><primary>ItdbLimitSort</primary></indexterm><programlisting>typedef enum {
    ITDB_LIMITSORT_RANDOM = 0x02,
    ITDB_LIMITSORT_SONG_NAME = 0x03,
    ITDB_LIMITSORT_ALBUM = 0x04,
    ITDB_LIMITSORT_ARTIST = 0x05,
    ITDB_LIMITSORT_GENRE = 0x07,
    ITDB_LIMITSORT_MOST_RECENTLY_ADDED = 0x10,
    ITDB_LIMITSORT_LEAST_RECENTLY_ADDED = 0x80000010, /* See note above */
    ITDB_LIMITSORT_MOST_OFTEN_PLAYED = 0x14,
    ITDB_LIMITSORT_LEAST_OFTEN_PLAYED = 0x80000014,   /* See note above */
    ITDB_LIMITSORT_MOST_RECENTLY_PLAYED = 0x15,
    ITDB_LIMITSORT_LEAST_RECENTLY_PLAYED = 0x80000015,/* See note above */
    ITDB_LIMITSORT_HIGHEST_RATING = 0x17,
    ITDB_LIMITSORT_LOWEST_RATING = 0x80000017,        /* See note above */
} ItdbLimitSort;
</programlisting>
<para>
Which songs to pick when using a limit type
</para>
<para>
Note: the values for <link linkend="ITDB-LIMITSORT-LEAST-RECENTLY-ADDED:CAPS"><type>ITDB_LIMITSORT_LEAST_RECENTLY_ADDED</type></link>,
<link linkend="ITDB-LIMITSORT-LEAST-OFTEN-PLAYED:CAPS"><type>ITDB_LIMITSORT_LEAST_OFTEN_PLAYED</type></link>, <link linkend="ITDB-LIMITSORT-LEAST-RECENTLY-PLAYED:CAPS"><type>ITDB_LIMITSORT_LEAST_RECENTLY_PLAYED</type></link>,
and <link linkend="ITDB-LIMITSORT-LOWEST-RATING:CAPS"><type>ITDB_LIMITSORT_LOWEST_RATING</type></link> are really 0x10, 0x14, 0x15, 0x17, with the
'limitsort_opposite' flag set.  This is the same value as the "positive"
value (i.e. <link linkend="ITDB-LIMITSORT-LEAST-RECENTLY-ADDED:CAPS"><type>ITDB_LIMITSORT_LEAST_RECENTLY_ADDED</type></link>), and is really very
terribly awfully weird, so we map the values to iPodDB specific values with
the high bit set.
</para>
<para>
On writing, we check the high bit and write the limitsort_opposite from that.
That way, we don't have to deal with programs using the class needing to set
the wrong limit and then make it into the "opposite", which would be frickin'
annoying.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="ITDB-LIMITSORT-RANDOM:CAPS" role="constant"/><literal>ITDB_LIMITSORT_RANDOM</literal></term>
<listitem><simpara>                Sort randomly
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITSORT-SONG-NAME:CAPS" role="constant"/><literal>ITDB_LIMITSORT_SONG_NAME</literal></term>
<listitem><simpara>             Sort by track name
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITSORT-ALBUM:CAPS" role="constant"/><literal>ITDB_LIMITSORT_ALBUM</literal></term>
<listitem><simpara>                 Sort by album name
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITSORT-ARTIST:CAPS" role="constant"/><literal>ITDB_LIMITSORT_ARTIST</literal></term>
<listitem><simpara>                Sort by artist name
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITSORT-GENRE:CAPS" role="constant"/><literal>ITDB_LIMITSORT_GENRE</literal></term>
<listitem><simpara>                 Sort by genre
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITSORT-MOST-RECENTLY-ADDED:CAPS" role="constant"/><literal>ITDB_LIMITSORT_MOST_RECENTLY_ADDED</literal></term>
<listitem><simpara>   Sort by most recently added
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITSORT-LEAST-RECENTLY-ADDED:CAPS" role="constant"/><literal>ITDB_LIMITSORT_LEAST_RECENTLY_ADDED</literal></term>
<listitem><simpara>  Sort by least recently added
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITSORT-MOST-OFTEN-PLAYED:CAPS" role="constant"/><literal>ITDB_LIMITSORT_MOST_OFTEN_PLAYED</literal></term>
<listitem><simpara>     Sort by most often played
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITSORT-LEAST-OFTEN-PLAYED:CAPS" role="constant"/><literal>ITDB_LIMITSORT_LEAST_OFTEN_PLAYED</literal></term>
<listitem><simpara>    Sort by least often played
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITSORT-MOST-RECENTLY-PLAYED:CAPS" role="constant"/><literal>ITDB_LIMITSORT_MOST_RECENTLY_PLAYED</literal></term>
<listitem><simpara>  Sort by most recently played
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITSORT-LEAST-RECENTLY-PLAYED:CAPS" role="constant"/><literal>ITDB_LIMITSORT_LEAST_RECENTLY_PLAYED</literal></term>
<listitem><simpara> Sort by least recently played
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITSORT-HIGHEST-RATING:CAPS" role="constant"/><literal>ITDB_LIMITSORT_HIGHEST_RATING</literal></term>
<listitem><simpara>        Sort by highest rating
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITSORT-LOWEST-RATING:CAPS" role="constant"/><literal>ITDB_LIMITSORT_LOWEST_RATING</literal></term>
<listitem><simpara>         Sort by lowest rating
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.5.0
</para></refsect2>
<refsect2>
<title><anchor id="ItdbLimitType" role="enum" condition="since:0.5.0"/>enum ItdbLimitType</title>
<indexterm role="0.5.0"><primary>ItdbLimitType</primary></indexterm><programlisting>typedef enum {
    ITDB_LIMITTYPE_MINUTES = 0x01,
    ITDB_LIMITTYPE_MB      = 0x02,
    ITDB_LIMITTYPE_SONGS   = 0x03,
    ITDB_LIMITTYPE_HOURS   = 0x04,
    ITDB_LIMITTYPE_GB      = 0x05
} ItdbLimitType;
</programlisting>
<para>
The type of unit to use when limiting a playlist</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="ITDB-LIMITTYPE-MINUTES:CAPS" role="constant"/><literal>ITDB_LIMITTYPE_MINUTES</literal></term>
<listitem><simpara> Limit in minutes
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITTYPE-MB:CAPS" role="constant"/><literal>ITDB_LIMITTYPE_MB</literal></term>
<listitem><simpara>      Limit in megabytes
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITTYPE-SONGS:CAPS" role="constant"/><literal>ITDB_LIMITTYPE_SONGS</literal></term>
<listitem><simpara>   Limit in number of songs
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITTYPE-HOURS:CAPS" role="constant"/><literal>ITDB_LIMITTYPE_HOURS</literal></term>
<listitem><simpara>   Limit in hours
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-LIMITTYPE-GB:CAPS" role="constant"/><literal>ITDB_LIMITTYPE_GB</literal></term>
<listitem><simpara>      Limit in gigabytes
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.5.0
</para></refsect2>
<refsect2>
<title><anchor id="ItdbSPLAction" role="enum" condition="since:0.5.0"/>enum ItdbSPLAction</title>
<indexterm role="0.5.0"><primary>ItdbSPLAction</primary></indexterm><programlisting>typedef enum {
    ITDB_SPLACTION_IS_INT = 0x00000001,
    ITDB_SPLACTION_IS_GREATER_THAN = 0x00000010,
    ITDB_SPLACTION_IS_LESS_THAN = 0x00000040,
    ITDB_SPLACTION_IS_IN_THE_RANGE = 0x00000100,
    ITDB_SPLACTION_IS_IN_THE_LAST = 0x00000200,
    ITDB_SPLACTION_BINARY_AND = 0x00000400,

    ITDB_SPLACTION_IS_STRING = 0x01000001,
    ITDB_SPLACTION_CONTAINS = 0x01000002,
    ITDB_SPLACTION_STARTS_WITH = 0x01000004,
    ITDB_SPLACTION_ENDS_WITH = 0x01000008,

    ITDB_SPLACTION_IS_NOT_INT = 0x02000001,
    ITDB_SPLACTION_IS_NOT_GREATER_THAN = 0x02000010,
    ITDB_SPLACTION_IS_NOT_LESS_THAN = 0x02000040,
    ITDB_SPLACTION_IS_NOT_IN_THE_RANGE = 0x02000100,
    ITDB_SPLACTION_IS_NOT_IN_THE_LAST = 0x02000200,

    ITDB_SPLACTION_IS_NOT = 0x03000001,
    ITDB_SPLACTION_DOES_NOT_CONTAIN = 0x03000002,
    ITDB_SPLACTION_DOES_NOT_START_WITH = 0x03000004,
    ITDB_SPLACTION_DOES_NOT_END_WITH = 0x03000008,
} ItdbSPLAction;
</programlisting>
<para>
Smartlist Actions used in smart playlist rules.
</para>
<para>
Note by Otto (Samuel Wood):
<informalexample>
 <programlisting>
 really this is a bitmapped field...
 high byte
 bit 0 = "string" values if set, "int" values if not set
 bit 1 = "not", or to negate the check.
 lower 2 bytes
 bit 0 = simple "IS" query
 bit 1 = contains
 bit 2 = begins with
 bit 3 = ends with
 bit 4 = greater than
 bit 5 = unknown, but probably greater than or equal to
 bit 6 = less than
 bit 7 = unknown, but probably less than or equal to
 bit 8 = a range selection
 bit 9 = "in the last"
 </programlisting>
</informalexample></para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="ITDB-SPLACTION-IS-INT:CAPS" role="constant"/><literal>ITDB_SPLACTION_IS_INT</literal></term>
<listitem><simpara>              is integer ("Is Set" in iTunes)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-IS-GREATER-THAN:CAPS" role="constant"/><literal>ITDB_SPLACTION_IS_GREATER_THAN</literal></term>
<listitem><simpara>     is greater than ("Is after" in iTunes)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-IS-LESS-THAN:CAPS" role="constant"/><literal>ITDB_SPLACTION_IS_LESS_THAN</literal></term>
<listitem><simpara>        is less than ("Is Before" in iTunes)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-IS-IN-THE-RANGE:CAPS" role="constant"/><literal>ITDB_SPLACTION_IS_IN_THE_RANGE</literal></term>
<listitem><simpara>     is in the range
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-IS-IN-THE-LAST:CAPS" role="constant"/><literal>ITDB_SPLACTION_IS_IN_THE_LAST</literal></term>
<listitem><simpara>      is in the last
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-BINARY-AND:CAPS" role="constant"/><literal>ITDB_SPLACTION_BINARY_AND</literal></term>
<listitem><simpara>          binary AND
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-IS-STRING:CAPS" role="constant"/><literal>ITDB_SPLACTION_IS_STRING</literal></term>
<listitem><simpara>           is a string
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-CONTAINS:CAPS" role="constant"/><literal>ITDB_SPLACTION_CONTAINS</literal></term>
<listitem><simpara>            contains
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-STARTS-WITH:CAPS" role="constant"/><literal>ITDB_SPLACTION_STARTS_WITH</literal></term>
<listitem><simpara>         starts with
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-ENDS-WITH:CAPS" role="constant"/><literal>ITDB_SPLACTION_ENDS_WITH</literal></term>
<listitem><simpara>           ends with
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-IS-NOT-INT:CAPS" role="constant"/><literal>ITDB_SPLACTION_IS_NOT_INT</literal></term>
<listitem><simpara>          is not an integer ("Is Not Set" in iTunes)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-IS-NOT-GREATER-THAN:CAPS" role="constant"/><literal>ITDB_SPLACTION_IS_NOT_GREATER_THAN</literal></term>
<listitem><simpara> is not greater than (not in iTunes)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-IS-NOT-LESS-THAN:CAPS" role="constant"/><literal>ITDB_SPLACTION_IS_NOT_LESS_THAN</literal></term>
<listitem><simpara>    is not less than (not in iTunes)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-IS-NOT-IN-THE-RANGE:CAPS" role="constant"/><literal>ITDB_SPLACTION_IS_NOT_IN_THE_RANGE</literal></term>
<listitem><simpara> is not in the range (not in iTunes)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-IS-NOT-IN-THE-LAST:CAPS" role="constant"/><literal>ITDB_SPLACTION_IS_NOT_IN_THE_LAST</literal></term>
<listitem><simpara>  is not in the last
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-IS-NOT:CAPS" role="constant"/><literal>ITDB_SPLACTION_IS_NOT</literal></term>
<listitem><simpara>              is not
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-DOES-NOT-CONTAIN:CAPS" role="constant"/><literal>ITDB_SPLACTION_DOES_NOT_CONTAIN</literal></term>
<listitem><simpara>    does not contain
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-DOES-NOT-START-WITH:CAPS" role="constant"/><literal>ITDB_SPLACTION_DOES_NOT_START_WITH</literal></term>
<listitem><simpara> does not start with (not in iTunes)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-DOES-NOT-END-WITH:CAPS" role="constant"/><literal>ITDB_SPLACTION_DOES_NOT_END_WITH</literal></term>
<listitem><simpara>   does not end with (not in iTunes)
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.5.0
</para></refsect2>
<refsect2>
<title><anchor id="ItdbSPLActionLast" role="enum" condition="since:0.5.0"/>enum ItdbSPLActionLast</title>
<indexterm role="0.5.0"><primary>ItdbSPLActionLast</primary></indexterm><programlisting>typedef enum {
    ITDB_SPLACTION_LAST_DAYS_VALUE = 86400,    /* nr of secs in 24 hours */
    ITDB_SPLACTION_LAST_WEEKS_VALUE = 604800,  /* nr of secs in 7 days   */
    ITDB_SPLACTION_LAST_MONTHS_VALUE = 2628000,/* nr of secs in 30.4167
						  days ~= 1 month */
} ItdbSPLActionLast;
</programlisting>
<para>
These are to pass to <link linkend="AddRule"><function>AddRule()</function></link> when you need a unit for the two "in the last"
action types.  In theory, you can use any time range.  iTunes might not
like it, but the iPod shouldn't care.</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="ITDB-SPLACTION-LAST-DAYS-VALUE:CAPS" role="constant"/><literal>ITDB_SPLACTION_LAST_DAYS_VALUE</literal></term>
<listitem><simpara>   Seconds in 24 hours
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-LAST-WEEKS-VALUE:CAPS" role="constant"/><literal>ITDB_SPLACTION_LAST_WEEKS_VALUE</literal></term>
<listitem><simpara>  Seconds in 7 days
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLACTION-LAST-MONTHS-VALUE:CAPS" role="constant"/><literal>ITDB_SPLACTION_LAST_MONTHS_VALUE</literal></term>
<listitem><simpara> Seconds in 1 month (approximately)
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.5.0
</para></refsect2>
<refsect2>
<title><anchor id="ItdbSPLActionType" role="enum" condition="since:0.5.0"/>enum ItdbSPLActionType</title>
<indexterm role="0.5.0"><primary>ItdbSPLActionType</primary></indexterm><programlisting>typedef enum
{
    ITDB_SPLAT_STRING = 1,
    ITDB_SPLAT_INT,
    ITDB_SPLAT_DATE,
    ITDB_SPLAT_RANGE_INT,
    ITDB_SPLAT_RANGE_DATE,
    ITDB_SPLAT_INTHELAST,
    ITDB_SPLAT_PLAYLIST,
    ITDB_SPLAT_NONE,
    ITDB_SPLAT_INVALID,
    ITDB_SPLAT_UNKNOWN,
    ITDB_SPLAT_BINARY_AND
} ItdbSPLActionType;
</programlisting>
<para>
Smart Playlist Action Types</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="ITDB-SPLAT-STRING:CAPS" role="constant"/><literal>ITDB_SPLAT_STRING</literal></term>
<listitem><simpara>      string
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLAT-INT:CAPS" role="constant"/><literal>ITDB_SPLAT_INT</literal></term>
<listitem><simpara>         from integer
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLAT-DATE:CAPS" role="constant"/><literal>ITDB_SPLAT_DATE</literal></term>
<listitem><simpara>        from date ...
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLAT-RANGE-INT:CAPS" role="constant"/><literal>ITDB_SPLAT_RANGE_INT</literal></term>
<listitem><simpara>   an integer range ...
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLAT-RANGE-DATE:CAPS" role="constant"/><literal>ITDB_SPLAT_RANGE_DATE</literal></term>
<listitem><simpara>  a date range ...
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLAT-INTHELAST:CAPS" role="constant"/><literal>ITDB_SPLAT_INTHELAST</literal></term>
<listitem><simpara>   in the last ...
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLAT-PLAYLIST:CAPS" role="constant"/><literal>ITDB_SPLAT_PLAYLIST</literal></term>
<listitem><simpara>    in playlist
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLAT-NONE:CAPS" role="constant"/><literal>ITDB_SPLAT_NONE</literal></term>
<listitem><simpara>        none
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLAT-INVALID:CAPS" role="constant"/><literal>ITDB_SPLAT_INVALID</literal></term>
<listitem><simpara>     invalid
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLAT-UNKNOWN:CAPS" role="constant"/><literal>ITDB_SPLAT_UNKNOWN</literal></term>
<listitem><simpara>     unknown
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLAT-BINARY-AND:CAPS" role="constant"/><literal>ITDB_SPLAT_BINARY_AND</literal></term>
<listitem><simpara>  is / is not (binary AND)
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.5.0
</para></refsect2>
<refsect2>
<title><anchor id="ItdbSPLField" role="enum" condition="since:0.5.0"/>enum ItdbSPLField</title>
<indexterm role="0.5.0"><primary>ItdbSPLField</primary></indexterm><programlisting>typedef enum {
    ITDB_SPLFIELD_SONG_NAME = 0x02,
    ITDB_SPLFIELD_ALBUM = 0x03,
    ITDB_SPLFIELD_ARTIST = 0x04,
    ITDB_SPLFIELD_BITRATE = 0x05,
    ITDB_SPLFIELD_SAMPLE_RATE = 0x06,
    ITDB_SPLFIELD_YEAR = 0x07,
    ITDB_SPLFIELD_GENRE = 0x08,
    ITDB_SPLFIELD_KIND = 0x09,
    ITDB_SPLFIELD_DATE_MODIFIED = 0x0a,
    ITDB_SPLFIELD_TRACKNUMBER = 0x0b,
    ITDB_SPLFIELD_SIZE = 0x0c,
    ITDB_SPLFIELD_TIME = 0x0d,
    ITDB_SPLFIELD_COMMENT = 0x0e,
    ITDB_SPLFIELD_DATE_ADDED = 0x10,
    ITDB_SPLFIELD_COMPOSER = 0x12,
    ITDB_SPLFIELD_PLAYCOUNT = 0x16,
    ITDB_SPLFIELD_LAST_PLAYED = 0x17,
    ITDB_SPLFIELD_DISC_NUMBER = 0x18,
    ITDB_SPLFIELD_RATING = 0x19,
    ITDB_SPLFIELD_COMPILATION = 0x1f,
    ITDB_SPLFIELD_BPM = 0x23,
    ITDB_SPLFIELD_GROUPING = 0x27,
    ITDB_SPLFIELD_PLAYLIST = 0x28,
    ITDB_SPLFIELD_VIDEO_KIND = 0x3c,
    ITDB_SPLFIELD_TVSHOW = 0x3e,
    ITDB_SPLFIELD_SEASON_NR = 0x3f,
    ITDB_SPLFIELD_SKIPCOUNT = 0x44,
    ITDB_SPLFIELD_LAST_SKIPPED = 0x45,
    ITDB_SPLFIELD_ALBUMARTIST = 0x47
} ItdbSPLField;
</programlisting>
<para>
Smart Playlist Fields, used for Smart Playlist Rules (<link linkend="Itdb-SPLRule"><type>Itdb_SPLRule</type></link>).</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-SONG-NAME:CAPS" role="constant"/><literal>ITDB_SPLFIELD_SONG_NAME</literal></term>
<listitem><simpara>        Song name (string)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-ALBUM:CAPS" role="constant"/><literal>ITDB_SPLFIELD_ALBUM</literal></term>
<listitem><simpara>            Album (string)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-ARTIST:CAPS" role="constant"/><literal>ITDB_SPLFIELD_ARTIST</literal></term>
<listitem><simpara>           Artist (string)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-BITRATE:CAPS" role="constant"/><literal>ITDB_SPLFIELD_BITRATE</literal></term>
<listitem><simpara>          Bitrate (integer, e.g. from/to = 128)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-SAMPLE-RATE:CAPS" role="constant"/><literal>ITDB_SPLFIELD_SAMPLE_RATE</literal></term>
<listitem><simpara>      Sample rate (integer, e.g. from/to = 44100)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-YEAR:CAPS" role="constant"/><literal>ITDB_SPLFIELD_YEAR</literal></term>
<listitem><simpara>             Year (integer, e.g. from/to = 2004)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-GENRE:CAPS" role="constant"/><literal>ITDB_SPLFIELD_GENRE</literal></term>
<listitem><simpara>            Genre (string)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-KIND:CAPS" role="constant"/><literal>ITDB_SPLFIELD_KIND</literal></term>
<listitem><simpara>             File type (string, e.g. MP3-File)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-DATE-MODIFIED:CAPS" role="constant"/><literal>ITDB_SPLFIELD_DATE_MODIFIED</literal></term>
<listitem><simpara>    Date modified (integer, e.g.
                                 from/to = bcf93280 == is before 6/19/2004)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-TRACKNUMBER:CAPS" role="constant"/><literal>ITDB_SPLFIELD_TRACKNUMBER</literal></term>
<listitem><simpara>      Track number (integer, e.g. from/to = 2)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-SIZE:CAPS" role="constant"/><literal>ITDB_SPLFIELD_SIZE</literal></term>
<listitem><simpara>             Size (integer, e.g.
                                 from/to = 0x00600000 for 6MB)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-TIME:CAPS" role="constant"/><literal>ITDB_SPLFIELD_TIME</literal></term>
<listitem><simpara>             Time (integer, e.g.
                                 from/to = 83999 for 1:23/83 seconds)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-COMMENT:CAPS" role="constant"/><literal>ITDB_SPLFIELD_COMMENT</literal></term>
<listitem><simpara>          Comment (string)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-DATE-ADDED:CAPS" role="constant"/><literal>ITDB_SPLFIELD_DATE_ADDED</literal></term>
<listitem><simpara>       Date added (integer, e.g.
                                 from/to = bcfa83ff == is after 6/19/2004)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-COMPOSER:CAPS" role="constant"/><literal>ITDB_SPLFIELD_COMPOSER</literal></term>
<listitem><simpara>         Composer (string)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-PLAYCOUNT:CAPS" role="constant"/><literal>ITDB_SPLFIELD_PLAYCOUNT</literal></term>
<listitem><simpara>        Playcount (integer, e.g. from/to = 1)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-LAST-PLAYED:CAPS" role="constant"/><literal>ITDB_SPLFIELD_LAST_PLAYED</literal></term>
<listitem><simpara>      Date last played (integer, e.g.
                                 from = bcfa83ff (6/19/2004)
                                 to = 0xbcfbd57f (6/20/2004))
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-DISC-NUMBER:CAPS" role="constant"/><literal>ITDB_SPLFIELD_DISC_NUMBER</literal></term>
<listitem><simpara>      Disc number (integer, e.g. from/to = 1)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-RATING:CAPS" role="constant"/><literal>ITDB_SPLFIELD_RATING</literal></term>
<listitem><simpara>           Rating (integer, e.g.
                                 from/to = 60 (3 stars))
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-COMPILATION:CAPS" role="constant"/><literal>ITDB_SPLFIELD_COMPILATION</literal></term>
<listitem><simpara>      Compilation (integer, e.g.
                                 is set -> ITDB_SPLACTION_IS_INT/from=1,
                                 not set -> ITDB_SPLACTION_IS_NOT_INT/from=1)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-BPM:CAPS" role="constant"/><literal>ITDB_SPLFIELD_BPM</literal></term>
<listitem><simpara>              Beats per minute (integer, e.g.
                                 from/to = 60)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-GROUPING:CAPS" role="constant"/><literal>ITDB_SPLFIELD_GROUPING</literal></term>
<listitem><simpara>         Grouping (string)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-PLAYLIST:CAPS" role="constant"/><literal>ITDB_SPLFIELD_PLAYLIST</literal></term>
<listitem><simpara>         FIXME Unknown...not parsed correctly...
                                 from/to = 0xb6fbad5f for "Purchased Music".
                                 Extra data after "to"...
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-VIDEO-KIND:CAPS" role="constant"/><literal>ITDB_SPLFIELD_VIDEO_KIND</literal></term>
<listitem><simpara>       Logical integer (works on mediatype)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-TVSHOW:CAPS" role="constant"/><literal>ITDB_SPLFIELD_TVSHOW</literal></term>
<listitem><simpara>           TV Show (string)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-SEASON-NR:CAPS" role="constant"/><literal>ITDB_SPLFIELD_SEASON_NR</literal></term>
<listitem><simpara>        Season number (integer)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-SKIPCOUNT:CAPS" role="constant"/><literal>ITDB_SPLFIELD_SKIPCOUNT</literal></term>
<listitem><simpara>        Skipcount (integer)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-LAST-SKIPPED:CAPS" role="constant"/><literal>ITDB_SPLFIELD_LAST_SKIPPED</literal></term>
<listitem><simpara>     Last skipped (integer)
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFIELD-ALBUMARTIST:CAPS" role="constant"/><literal>ITDB_SPLFIELD_ALBUMARTIST</literal></term>
<listitem><simpara>      Album artist (string)
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.5.0
</para></refsect2>
<refsect2>
<title><anchor id="ItdbSPLFieldType" role="enum" condition="since:0.5.0"/>enum ItdbSPLFieldType</title>
<indexterm role="0.5.0"><primary>ItdbSPLFieldType</primary></indexterm><programlisting>typedef enum
{
    ITDB_SPLFT_STRING = 1,
    ITDB_SPLFT_INT,
    ITDB_SPLFT_BOOLEAN,
    ITDB_SPLFT_DATE,
    ITDB_SPLFT_PLAYLIST,
    ITDB_SPLFT_UNKNOWN,
    ITDB_SPLFT_BINARY_AND
} ItdbSPLFieldType;
</programlisting>
<para>
Smart Playlist Field Types</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="ITDB-SPLFT-STRING:CAPS" role="constant"/><literal>ITDB_SPLFT_STRING</literal></term>
<listitem><simpara>      string
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFT-INT:CAPS" role="constant"/><literal>ITDB_SPLFT_INT</literal></term>
<listitem><simpara>         integer
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFT-BOOLEAN:CAPS" role="constant"/><literal>ITDB_SPLFT_BOOLEAN</literal></term>
<listitem><simpara>     boolean
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFT-DATE:CAPS" role="constant"/><literal>ITDB_SPLFT_DATE</literal></term>
<listitem><simpara>        date
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFT-PLAYLIST:CAPS" role="constant"/><literal>ITDB_SPLFT_PLAYLIST</literal></term>
<listitem><simpara>    playlist
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFT-UNKNOWN:CAPS" role="constant"/><literal>ITDB_SPLFT_UNKNOWN</literal></term>
<listitem><simpara>     unknown
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLFT-BINARY-AND:CAPS" role="constant"/><literal>ITDB_SPLFT_BINARY_AND</literal></term>
<listitem><simpara>  binary AND
</simpara></listitem>
</varlistentry>
</variablelist><para role="since">Since  0.5.0
</para></refsect2>
<refsect2>
<title><anchor id="ItdbSPLMatch" role="enum"/>enum ItdbSPLMatch</title>
<indexterm><primary>ItdbSPLMatch</primary></indexterm><programlisting>typedef enum {
    ITDB_SPLMATCH_AND = 0,
    ITDB_SPLMATCH_OR = 1
} ItdbSPLMatch;
</programlisting>
<para>
Types for smart playlist rules match_operator</para>
<para>

</para><variablelist role="enum">
<varlistentry>
<term><anchor id="ITDB-SPLMATCH-AND:CAPS" role="constant"/><literal>ITDB_SPLMATCH_AND</literal></term>
<listitem><simpara> Logical AND - all of the rules must be true in order for
                    the combined rule to be applied
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><anchor id="ITDB-SPLMATCH-OR:CAPS" role="constant"/><literal>ITDB_SPLMATCH_OR</literal></term>
<listitem><simpara>  Logical OR - any of the rules may be true
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="ITDB-SPL-DATE-IDENTIFIER:CAPS" role="macro" condition="since:0.5.0"/>ITDB_SPL_DATE_IDENTIFIER</title>
<indexterm role="0.5.0"><primary>ITDB_SPL_DATE_IDENTIFIER</primary></indexterm><programlisting>#define ITDB_SPL_DATE_IDENTIFIER (G_GINT64_CONSTANT (0x2dae2dae2dae2daeU))
</programlisting>
<para>
Identifier for smart playlist date fields</para>
<para>

</para><para role="since">Since  0.5.0
</para></refsect2>
<refsect2>
<title><anchor id="ITDB-SPL-STRING-MAXLEN:CAPS" role="macro" condition="since:0.5.0"/>ITDB_SPL_STRING_MAXLEN</title>
<indexterm role="0.5.0"><primary>ITDB_SPL_STRING_MAXLEN</primary></indexterm><programlisting>#define ITDB_SPL_STRING_MAXLEN 255
</programlisting>
<para>
Maximum string length for smart playlists</para>
<para>

</para><para role="since">Since  0.5.0
</para></refsect2>
<refsect2>
<title><anchor id="itdb-splr-get-field-type" role="function"/>itdb_splr_get_field_type ()</title>
<indexterm><primary>itdb_splr_get_field_type</primary></indexterm><programlisting><link linkend="ItdbSPLFieldType">ItdbSPLFieldType</link>    itdb_splr_get_field_type            (const <link linkend="Itdb-SPLRule">Itdb_SPLRule</link> *splr);</programlisting>
<para>
Gets the type of the field of the <parameter>splr</parameter> rule</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>splr</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-SPLRule"><type>Itdb_SPLRule</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> an <link linkend="Itdb-SPLFieldType"><type>Itdb_SPLFieldType</type></link> corresponding to <parameter>splr</parameter> field
type (string, int, date, ...)
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-splr-get-action-type" role="function"/>itdb_splr_get_action_type ()</title>
<indexterm><primary>itdb_splr_get_action_type</primary></indexterm><programlisting><link linkend="ItdbSPLActionType">ItdbSPLActionType</link>   itdb_splr_get_action_type           (const <link linkend="Itdb-SPLRule">Itdb_SPLRule</link> *splr);</programlisting>
<para>
Gets the type of the action associated with <parameter>splr</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>splr</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-SPLRule"><type>Itdb_SPLRule</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> type (range, date, string...) of the action field
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-splr-validate" role="function"/>itdb_splr_validate ()</title>
<indexterm><primary>itdb_splr_validate</primary></indexterm><programlisting><link linkend="void">void</link>                itdb_splr_validate                  (<link linkend="Itdb-SPLRule">Itdb_SPLRule</link> *splr);</programlisting>
<para>
Validates a smart playlist rule</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>splr</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-SPLRule"><type>Itdb_SPLRule</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-splr-remove" role="function"/>itdb_splr_remove ()</title>
<indexterm><primary>itdb_splr_remove</primary></indexterm><programlisting><link linkend="void">void</link>                itdb_splr_remove                    (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                                         <link linkend="Itdb-SPLRule">Itdb_SPLRule</link> *splr);</programlisting>
<para>
Removes the smart playlist rule <parameter>splr</parameter> from playlist <parameter>pl</parameter>. The memory
used by <parameter>splr</parameter> is freed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>splr</parameter>&nbsp;:</term>
<listitem><simpara> an Itdb_SPLRule
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-splr-new" role="function"/>itdb_splr_new ()</title>
<indexterm><primary>itdb_splr_new</primary></indexterm><programlisting><link linkend="Itdb-SPLRule">Itdb_SPLRule</link>*       itdb_splr_new                       (void);</programlisting>
<para>
Creates a new default smart rule</para>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> a new <link linkend="Itdb-SPLRule"><type>Itdb_SPLRule</type></link> that must be freed with <link linkend="itdb-splr-free"><function>itdb_splr_free()</function></link> when
no longer needed
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-splr-add" role="function"/>itdb_splr_add ()</title>
<indexterm><primary>itdb_splr_add</primary></indexterm><programlisting><link linkend="void">void</link>                itdb_splr_add                       (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                                         <link linkend="Itdb-SPLRule">Itdb_SPLRule</link> *splr,
                                                         <link linkend="gint">gint</link> pos);</programlisting>
<para>
Adds the smart rule <parameter>splr</parameter> to <parameter>pl</parameter> at position <parameter>pos</parameter>. If <parameter>pos</parameter> is -1,
<parameter>splr</parameter> gets appended to the end. After this call, <parameter>splr</parameter> memory is
managed by <parameter>pl</parameter>, so you no longer need to call <link linkend="itdb-splr-free"><function>itdb_splr_free()</function></link></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara>     an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>splr</parameter>&nbsp;:</term>
<listitem><simpara>   an <link linkend="Itdb-SPLRule"><type>Itdb_SPLRule</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&nbsp;:</term>
<listitem><simpara>    position of the rule
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-splr-add-new" role="function"/>itdb_splr_add_new ()</title>
<indexterm><primary>itdb_splr_add_new</primary></indexterm><programlisting><link linkend="Itdb-SPLRule">Itdb_SPLRule</link>*       itdb_splr_add_new                   (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *pl,
                                                         <link linkend="gint">gint</link> pos);</programlisting>
<para>
Creates a new smart rule and inserts it at position <parameter>pos</parameter> in <parameter>pl</parameter>. If
<parameter>pos</parameter> is -1, the new rule gets appended to the end.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pl</parameter>&nbsp;:</term>
<listitem><simpara>     an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pos</parameter>&nbsp;:</term>
<listitem><simpara>    position to insert the rule at
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> pointer to the newly created <link linkend="Itdb-SPLRule"><type>Itdb_SPLRule</type></link>. Its
memory is handled by <parameter>pl</parameter> though, so you don't need to explicitly
call <link linkend="itdb-splr-free"><function>itdb_splr_free()</function></link> on it
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-spl-copy-rules" role="function"/>itdb_spl_copy_rules ()</title>
<indexterm><primary>itdb_spl_copy_rules</primary></indexterm><programlisting><link linkend="void">void</link>                itdb_spl_copy_rules                 (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *dest,
                                                         <link linkend="Itdb-Playlist">Itdb_Playlist</link> *src);</programlisting>
<para>
Copy all relevant information for smart playlist from playlist <parameter>src</parameter>
to playlist <parameter>dest</parameter>. If <parameter>dest</parameter> is already a smart playlist, the
existing data is overwritten/deleted.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dest</parameter>&nbsp;:</term>
<listitem><simpara>   destination <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>src</parameter>&nbsp;:</term>
<listitem><simpara>    source <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-splr-eval" role="function"/>itdb_splr_eval ()</title>
<indexterm><primary>itdb_splr_eval</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            itdb_splr_eval                      (<link linkend="Itdb-SPLRule">Itdb_SPLRule</link> *splr,
                                                         <link linkend="Itdb-Track">Itdb_Track</link> *track);</programlisting>
<para>
Evaluates <parameter>splr</parameter>'s truth against <parameter>track</parameter>. <parameter>track->itdb</parameter> must be set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>splr</parameter>&nbsp;:</term>
<listitem><simpara>   an <link linkend="Itdb-SPLRule"><type>Itdb_SPLRule</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>track</parameter>&nbsp;:</term>
<listitem><simpara>  an <link linkend="Itdb-Track"><type>Itdb_Track</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara> TRUE if <parameter>track</parameter> matches <parameter>splr</parameter>, FALSE otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-spl-update" role="function"/>itdb_spl_update ()</title>
<indexterm><primary>itdb_spl_update</primary></indexterm><programlisting><link linkend="void">void</link>                itdb_spl_update                     (<link linkend="Itdb-Playlist">Itdb_Playlist</link> *spl);</programlisting>
<para>
Updates the content of the smart playlist <parameter>spl</parameter> (meant to be called
if the tracks stored in the <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link> associated with <parameter>spl</parameter>
have changed somehow and you want <parameter>spl->members</parameter> to be accurate
with regards to those changes. Does nothing if <parameter>spl</parameter> isn't a smart
playlist.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>spl</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-Playlist"><type>Itdb_Playlist</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-spl-update-all" role="function"/>itdb_spl_update_all ()</title>
<indexterm><primary>itdb_spl_update_all</primary></indexterm><programlisting><link linkend="void">void</link>                itdb_spl_update_all                 (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);</programlisting>
<para>
Updates all smart playlists contained in <parameter>itdb</parameter></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="itdb-spl-update-live" role="function" condition="since:0.2.0"/>itdb_spl_update_live ()</title>
<indexterm role="0.2.0"><primary>itdb_spl_update_live</primary></indexterm><programlisting><link linkend="void">void</link>                itdb_spl_update_live                (<link linkend="Itdb-iTunesDB">Itdb_iTunesDB</link> *itdb);</programlisting>
<para>
Updates all smart playlists contained in <parameter>itdb</parameter> which have the
<parameter>liveupdate</parameter> flag set.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>itdb</parameter>&nbsp;:</term>
<listitem><simpara> an <link linkend="Itdb-iTunesDB"><type>Itdb_iTunesDB</type></link>
</simpara></listitem></varlistentry>
</variablelist><para role="since">Since  0.2.0
</para></refsect2>

</refsect1>



<refsect1>
<title>See Also</title>
<para>
<link linkend="libgpod-Playlists">Playlists</link>
</para>
</refsect1>


<refsect1><refsect2 /><refsect2 /></refsect1>
</refentry>
